<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>opensabre-framework</artifactId>
        <groupId>io.github.opensabre</groupId>
        <version>${revision}</version>
    </parent>

    <artifactId>opensabre-base-dependencies</artifactId>
    <packaging>pom</packaging>

    <properties>
        <dockerhub.repository>opensabre</dockerhub.repository>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!--  编译   -->
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <lombok.version>1.18.30</lombok.version>
        <spring-boot-maven-plugin.version>3.2.3</spring-boot-maven-plugin.version>
        <dockerfile-maven-plugin.version>1.4.13</dockerfile-maven-plugin.version>
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <git-commit-id-plugin.version>4.9.10</git-commit-id-plugin.version>
        <!--  依赖   -->
        <spring.boot.version>3.2.3</spring.boot.version>
        <spring.cloud.version>2023.0.0</spring.cloud.version>
        <spring.cloud.alibaba.version>2023.0.0.0-RC1</spring.cloud.alibaba.version>
        <jetcache-starter-redis.version>2.7.5</jetcache-starter-redis.version>
        <knife4j-openapi3.version>4.4.0</knife4j-openapi3.version>
        <swagger-annotations.version>2.2.19</swagger-annotations.version>
        <mysql-connector-j.version>8.0.31</mysql-connector-j.version>
        <jakarta.servlet-api.version>6.0.0</jakarta.servlet-api.version>
        <mybatis-plus-boot-starter.version>3.5.5</mybatis-plus-boot-starter.version>
        <mybatis-spring.version>3.0.3</mybatis-spring.version>
        <hutool.version>5.8.18</hutool.version>
        <feign-interceptors>1.1.2</feign-interceptors>
        <guava.version>31.1-jre</guava.version>
        <jasypt-springboot.version>3.0.5</jasypt-springboot.version>
        <!--  测试   -->
        <junit-jupiter.version>5.9.1</junit-jupiter.version>
        <spring-test.version>5.3.31</spring-test.version>
        <httpclient5.version>5.2.3</httpclient5.version>
    </properties>

    <!-- 依赖管理定义 -->
    <dependencyManagement>
        <dependencies>
            <!-- spring boot 依赖导入 -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- spring cloud 依赖导入 -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- spring cloud alibaba 依赖导入 -->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring.cloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- hutool工具 -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-bom</artifactId>
                <version>${hutool.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- 多级缓存 local and Redis -->
            <dependency>
                <groupId>com.alicp.jetcache</groupId>
                <artifactId>jetcache-starter-redis-lettuce</artifactId>
                <version>${jetcache-starter-redis.version}</version>
            </dependency>
            <!--  WEB -->
            <dependency>
                <groupId>jakarta.servlet</groupId>
                <artifactId>jakarta.servlet-api</artifactId>
                <version>${jakarta.servlet-api.version}</version>
                <scope>provided</scope>
            </dependency>
            <!--  负载组件 -->
            <dependency>
                <groupId>no.ks.fiks</groupId>
                <artifactId>feign-interceptors</artifactId>
                <version>${feign-interceptors}</version>
            </dependency>
            <!-- 服务调用负载 -->
            <dependency>
                <groupId>org.apache.httpcomponents.core5</groupId>
                <artifactId>httpcore5</artifactId>
                <version>${httpclient5.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.httpcomponents.client5</groupId>
                <artifactId>httpclient5</artifactId>
                <version>${httpclient5.version}</version>
            </dependency>
            <!--springdoc - restfull API文档-->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-openapi3-jakarta-spring-boot-starter</artifactId>
                <version>${knife4j-openapi3.version}</version>
            </dependency>
            <!--opensabre 组件-->
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-web</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-starter-boot</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-starter-register</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-starter-rpc</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-starter-config</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-starter-persistence</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-starter-cache</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-starter-eda</artifactId>
                <version>${revision}</version>
            </dependency>
            <dependency>
                <groupId>com.github.ulisesbocchio</groupId>
                <artifactId>jasypt-spring-boot-starter</artifactId>
                <version>${jasypt-springboot.version}</version>
            </dependency>
            <!--使用 lombok 简化 Java 代码-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>
            <!--持久化数据库-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus-boot-starter.version}</version>
            </dependency>
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-extension</artifactId>
                <version>${mybatis-plus-boot-starter.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis</groupId>
                <artifactId>mybatis-spring</artifactId>
                <version>${mybatis-spring.version}</version>
            </dependency>
            <!--数据库驱动-->
            <dependency>
                <groupId>com.mysql</groupId>
                <artifactId>mysql-connector-j</artifactId>
                <version>${mysql-connector-j.version}</version>
            </dependency>
            <!--Swagger - RESTFULL API文档-->
            <dependency>
                <groupId>io.swagger.core.v3</groupId>
                <artifactId>swagger-annotations-jakarta</artifactId>
                <version>${swagger-annotations.version}</version>
            </dependency>
            <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>
            <!--junit单元测试-->
            <dependency>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
                <version>${junit-jupiter.version}</version>
            </dependency>
            <!--opensabre测试组件-->
            <dependency>
                <groupId>io.github.opensabre</groupId>
                <artifactId>opensabre-test</artifactId>
                <version>${revision}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!--依赖插件版本定义-->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <parameters>true</parameters>
                    </configuration>
                </plugin>
                <!--springboot官方构建插件，可构建docker image-->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring-boot-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <goals>
                                <goal>build-info</goal>
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!--docker镜像构建-->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>dockerfile-maven-plugin</artifactId>
                    <version>${dockerfile-maven-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>default</id>
                            <goals>
                                <goal>build</goal>
                                <goal>push</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <repository>${dockerhub.repository}/${project.name}</repository>
                        <tag>${project.version}</tag>
                        <buildArgs>
                            <JAR_FILE>${project.build.finalName}.jar</JAR_FILE>
                        </buildArgs>
                        <dockerfile>src/main/docker/Dockerfile</dockerfile>
                    </configuration>
                </plugin>
                <!--测试案例-->
                <plugin>
                    <!-- JUnit 5 requires Surefire version 2.22.0 or higher -->
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>pl.project13.maven</groupId>
                    <artifactId>git-commit-id-plugin</artifactId>
                    <version>${git-commit-id-plugin.version}</version>
                    <executions>
                        <execution>
                            <id>get-the-git-infos</id>
                            <goals>
                                <goal>revision</goal>
                            </goals>
                            <!-- *NOTE*: 默认是initialize阶段执行，可以修改为其他阶段 -->
                            <phase>initialize</phase>
                        </execution>
                        <execution>
                            <id>validate-the-git-infos</id>
                            <goals>
                                <goal>validateRevision</goal>
                            </goals>
                            <!-- *NOTE*: 默认是打包阶段执行，可以修改为其他 -->
                            <phase>package</phase>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- git文件记录，默认是 ${project.basedir}/.git如果非默认，可以指定，例如： ${project.basedir}/../.git -->
                        <dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
                        <!-- 属性前缀，可以理解为namespace，默认是git, 例如 `${configured-prefix}.commit.id`.更多信息可以参考 (see
                            https://github.com/git-commit-id/git-commit-id-maven-plugin/issues/137#issuecomment-418144756
                            for a full example).
                        -->
                        <prefix>git</prefix>
                        <!-- 默认的日期格式，使用方式(e.g. `git.commit.time` and `git.build.time`). -->
                        <dateFormat>yyyy-MM-dd'T'HH:mm:ssZ</dateFormat>
                        <!-- 时区(java.util.TimeZone.getDefault().getID()).
                            *Note*: 指定时区可以如下 `MAVEN_OPTS=-Duser.timezone=UTC mvn clean package`, `mvn clean package -Duser.timezone=UTC`或者使用 Asia/Shanghai 直接指定，该属性会使用在
                            (e.g. `git.commit.time` and `git.build.time`).
                        -->
                        <dateFormatTimeZone>${user.timezone}</dateFormatTimeZone>
                        <!-- 默认false，构建时打印信息 -->
                        <verbose>true</verbose>
                        <!-- 默认false, 如果是true, 会生成properties 文件（填充文件中的属性值），文件配置在 generateGitPropertiesFilename 中， 构建时间使用如下                    -->
                        <generateGitPropertiesFile>true</generateGitPropertiesFile>
                        <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
                        <!-- 默认是true，如果打包是pom(e.g. `<packaging>pom</packaging>`)，则运行该插件 -->
                        <skipPoms>true</skipPoms>
                        <!-- 默认true，说明：当设置为“true”时，此插件将尝试将生成的属性公开到`System.getProperties()`. 设置为{@code'false'}以避免此曝光。注意通过命令行提供的参数（例如`-Dgit.commit.id=值`)仍然有优先权。 -->
                        <injectIntoSysProperties>true</injectIntoSysProperties>
                        <!-- 默认false， 指定在找不到.git目录时插件是否应失败。当设置为“false”并且没有找到.git目录时，插件将跳过执行。 -->
                        <failOnNoGitDirectory>true</failOnNoGitDirectory>
                        <!-- 默认7，配置缩写git提交id的长度(`git.commit.id.abbrev`）到长度至少为N。`0'具有特殊含义（签出git/git文档描述-描述.md)对于特殊情况，缩写为0）。最大值为“40”，因为最大SHA-1长度。 -->
                        <abbrevLength>7</abbrevLength>
                        <!-- 目前，交换机允许两种不同的选择：1默认情况下，此属性设置为“flat”，并将生成以前已知的财产`git.commit.id`就像以前版本的插件一样。保持默认情况下，它将“flat”保留向后兼容性，不需要进一步的操作最终用户调整。2如果将此开关设置为“full”，则插件将导出以前已知的属性`git.commit.id`作为`git.commit.id.full`因此将生成完全有效的导出机制中的json对象。-->
                        <commitIdGenerationMode>flat</commitIdGenerationMode>
                        <!-- 可以用作非常强大的版本控制助手, 可以参考https://git-scm.com/docs/git-describe -->
                        <gitDescribe>
                            <!-- 默认false， 如果true，则不使用该配置 -->
                            <skip>false</skip>
                            <!--  默认true，在某些情况下，在提交附近找不到标记（例如，通常在执行浅克隆）。如果将其设置为“true”，并且未找到标记，则此属性将改为回退到提交的id（当“true”时，此属性不会变为空）-->
                            <always>true</always>
                            <!-- 在describe输出中，哈希的对象id总是缩写为N个字母（默认为7）-->
                            <abbrev>7</abbrev>
                            <!-- Default (optional): -dirty 在处于“脏状态”（未提交）的存储库上运行“描述”时更改），说明输出将包含一个附加后缀 -->
                            <dirty>-dirty</dirty>
                        </gitDescribe>
                        <!-- 附加的验证实用程序，可用于验证项目属性是否设置 -->
                        <validationProperties>
                            <validationProperty>
                                <!-- 用于识别验证的描述性名称,不匹配（将显示在错误消息中）-->
                                <name>validating project version</name>
                                <!-- 需要验证的值*注意*：为了能够验证在pom本身您可能需要设置配置`<injectAllReactorProjects>true</injectAllReactorProjects>`。 -->
                                <value>${project.version}</value>
                                <!-- the expected value -->
                                <shouldMatchTo><![CDATA[^.*(?<!-SNAPSHOT)$]]></shouldMatchTo>
                            </validationProperty>
                            <!-- the next validationProperty you would like to validate -->
                        </validationProperties>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>